from django.db import models
from django.contrib.auth.models import AbstractUser
from django.utils.translation import gettext_lazy as _


def upload_to(instance, filename):  # explicitly set upload path and filename
    return "images/{user}/{name}".format(user=instance.user.id, name=filename)


def ImageDataset(instance, filename):  # explicitly set upload path and filename
    return "imageData/{user}/{name}".format(user=instance.user.id, name=filename)


def MappingDataset(instance, filename):  # explicitly set upload path and filename
    return "mappingData/{user}/{name}".format(user=instance.user.id, name=filename)


def ResultDataset(instance, filename):  # explicitly set upload path and filename
    return "resultData/{user}/{name}".format(user=instance.user.id, name=filename)


class Users(AbstractUser):
    full_name = models.CharField(
        max_length=50, blank=True, null=True, help_text=_("Full Name of the User")
    )
    avatar = models.ImageField(
        upload_to=upload_to, null=True, blank=True, help_text=_("Avatar of this user")
    )
    institution = models.CharField(
        max_length=50, null=True, blank=True, help_text=_("Institution of this user")
    )
    apikey = models.CharField(
        max_length=50,
        null=True,
        help_text=_("User API Key (Token), generated by django AuthToken"),
    )


class TaskHistory(models.Model):

    user = models.ForeignKey(
        Users, on_delete=models.CASCADE, help_text=_("Corresponding user ID")
    )
    groupname = models.CharField(
        max_length=50,
        null=True,
        help_text=_("User Group Name for this current Task"),
    )
    status = models.CharField(
        max_length=50,
        null=True,
        help_text=_("Task Status, ex: 'STARTED', 'FINISHED"),
    )
    model = models.CharField(
        max_length=50, null=True, blank=True, help_text=_("Selected Model for the Task")
    )
    type = models.CharField(
        max_length=50,
        null=True,
        help_text=_("Type of the task, ex: 'segmentation'"),
    )
    createdate = models.DateTimeField(
        auto_now_add=True, help_text=_("Task Creation Date")
    )
    sources = models.JSONField(
        _("Source"),
        default=list,
        null=True,
        help_text=_("Source Image's Url(s)"),
    )
    results = models.JSONField(
        _("Result"),
        default=list,
        null=True,
        help_text=_("Result Image's Url(s)"),
    )


class ImageData(models.Model):
    user = models.ForeignKey(
        Users, on_delete=models.CASCADE, help_text=_("Corresponding user ID")
    )
    groupname = models.CharField(
        max_length=50,
        null=True,
        help_text=_("User Group Name for this current Task"),
    )
    task = models.ForeignKey(
        TaskHistory,
        on_delete=models.CASCADE,
        null=True,
        help_text=_("Corresponding Task"),
    )
    images = models.FileField(
        _("images"),
        upload_to=ImageDataset,
        null=True,
        help_text=_("Image File to be Processed"),
    )
    result = models.ImageField(
        upload_to=ResultDataset, null=True, blank=True, help_text=_("Image Result")
    )


class Researcher(models.Model):
    name = models.CharField(
        _("Name"),
        primary_key=True,
        max_length=50,
        help_text=_("Researcher's Name"),
    )
    avatar = models.ImageField(
        _("Avatar"), null=True, help_text=_("Researcher's Avatar")
    )
    link = models.URLField(
        _("link"), null=True, help_text=_("Researcher's Profile Link on ITS Webiste")
    )
    kwargs = models.JSONField(
        default=dict,
        null=True,
        help_text=_("Optional kwargs for Researcher Section"),
    )


class LandingPage(models.Model):
    section = models.CharField(
        _("Section"),
        primary_key=True,
        max_length=50,
        help_text=_("Corresponding Landing Page's Section"),
    )
    title = models.CharField(
        _("title"),
        max_length=50,
        default=str,
        help_text=_("Landing Page's Section Title"),
    )
    content = models.TextField(
        _("Content"),
        null=True,
        help_text=_("Content of Landing Page's Section"),
    )
    image = models.ImageField(
        null=True,
        help_text=_("Optional Image for Landing Page's Section"),
    )
    kwargs = models.JSONField(
        default=dict,
        null=True,
        help_text=_("Optional kwargs for Landing Page's Section"),
    )

    class Meta:
        ordering = ["section"]
